pipeline {
  environment {
    imagename = "khadydiagne/k8s_app_desktop"
    registryCredential = 'dockerhub'
    //SONAR_PROJECT_KEY = 'test_java'
    //SONAR_HOST_URL = 'http://192.168.230.128:9000'
    //SONAR_TOKEN = credentials('sonarqube') // Jeton d'accès SonarQube stocké dans Jenkins
    KUBECONFIG = 'C:\\jenkins\\.kube\\config'  // Chemin vers le fichier kubeconfig sur Windows
  }
  agent any
  stages {
    stage('Cloning Git') {
      steps {
        git([url: 'https://github.com/khadythiara/test_sonarqube.git', branch: 'main'])
        bat 'chmod +x ./mvnw'  // Utilisation de 'bat' pour exécuter une commande sous Windows
      }
    }

    stage('Building Image') {
      steps {
        script {
          dockerImage = docker.build(imagename, ".")
        }
      }
    }

    stage('Push Image') {
      steps {
        script {
          docker.withRegistry('', registryCredential) {
            dockerImage.push("$BUILD_NUMBER")
            dockerImage.push('latest')
          }
        }
      }
    }

    stage('ArgoCD Deployment') {
      steps {
        script {
          bat 'kubectl apply -f argocd_deploy.yaml --validate=false'
        }
      }
    }

    stage('Scale Deployment') {
      steps {
        script {
          // Mise à l'échelle des réplicas à 3
          bat 'kubectl scale deployment k8s-app-deployment --replicas=3'
          // Vérification de la mise à l'échelle
          bat 'kubectl get pods -o wide'
        }
      }
    }

    stage('Monitor Scaling') {
      steps {
        script {
          // Affichage des métriques de ressources
          bat 'kubectl top pods'
          
          // Optionnel : vérifier l'état de la charge sur les nœuds
          bat 'kubectl top nodes'
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        script {
          // Vérifier que les ressources Kubernetes sont correctement déployées
          bat 'kubectl get all -n default'
          bat 'kubectl get pv'
          bat 'kubectl get pvc'
          bat 'kubectl get hpa'
        }
      }
    }
  }

  post {
    always {
      script {
        bat 'kubectl delete pods --field-selector=status.phase=Succeeded'
      }
      echo 'Pipeline terminé et nettoyage effectué'
    }
  }
}
