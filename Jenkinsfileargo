pipeline {
  environment {
    imagename = "khadydiagne/k8s_app"
    registryCredential = 'docker'
    SONAR_PROJECT_KEY = 'test_java'
    SONAR_HOST_URL = 'http://192.168.230.128:9000'
    SONAR_TOKEN = credentials('sonarqube') // Jeton d'accès SonarQube stocké dans Jenkins
    KUBECONFIG = '/var/lib/jenkins/.kube/config'  // Chemin vers le fichier kubeconfig dans Jenkins
  }
  agent any
  stages {
    stage('Cloning Git') {
      steps {
        git([url: 'https://github.com/khadythiara/test_sonarqube.git', branch: 'main'])
        sh 'chmod +x ./mvnw'
      }
    }

    stage('Building Image') {
      steps {
        script {
          dockerImage = docker.build(imagename, ".")
        }
      }
    }

    stage('Push Image') {
      steps {
        script {
          docker.withRegistry('', registryCredential) {
            dockerImage.push("$BUILD_NUMBER")
            dockerImage.push('latest')
          }
        }
      }
    }
stage('Cleanup Docker') {
  steps {
    script {
      // Supprimer l'image locale avec le tag spécifique et 'latest'
      sh 'docker rmi khadydiagne/k8s_app:57'
      sh 'docker rmi khadydiagne/k8s_app:latest'
      
      // Supprimer les images dangling (<none>)
      sh 'docker image prune -f'
    }
  }
}

   stage('ArgoCD Deployment') {
      steps {
        script {
          sh 'kubectl apply -f argocd_deploy.yaml '
        }
    }
  }

    stage('Scale Deployment') {
      steps {
        script {
          // Mise à l'échelle des réplicas à 5
          sh 'kubectl scale deployment k8s-app-deployment --replicas=3'
          // Vérification de la mise à l'échelle
          sh 'kubectl get pods -o wide'
        }
      }
    }

    stage('Monitor Scaling') {
      steps {
        script {
          // Affichage des métriques de ressources
          sh 'kubectl top pods'
          
          // Optionnel : vérifier l'état de la charge sur les nœuds
          sh 'kubectl top nodes'
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        script {
          // Vérifier que les ressources Kubernetes sont correctement déployées
          sh 'kubectl get all -n default'
          sh 'kubectl get pv'
          sh 'kubectl get pvc'
          sh 'kubectl get hpa'

        }
      }
    }
  }

 post {
  always {
    script {
      sh 'kubectl delete pods --field-selector=status.phase=Succeeded'
    }
    echo 'Pipeline terminé et nettoyage effectué'
  }
}

}
